version: '3.7'

services:

# =============================================================
#
#	TRAEFIK - reverse proxy
#
# =============================================================

  reverse-proxy:
    image: traefik:latest
    command:
      # - "--log.level=DEBUG"
      # - "--api.dashboard=true"
      # - "--api.insecure=false"
      - "--providers.file.directory=/FileProvider/"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge=true"
      - "--certificatesresolvers.certificato.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.certificato.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.certificato.acme.dnschallenge.resolvers=1.1.1.1:53"
      # - "--certificatesresolvers.certificato.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.certificato.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.certificato.acme.storage=acme.json"
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
      CLOUDFLARE_EMAIL: ${CLOUDFLARE_EMAIL}
      CLOUDFLARE_API_KEY: ${CLOUDFLARE_API_KEY}
    container_name: traefik
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`)"
    #   - "traefik.http.routers.api.entrypoints=web-secure"
    #   - "traefik.http.routers.api.tls.certresolver=certificato"
    #   - "traefik.http.routers.api.tls.domains[0].main=*.${DOMAIN}"
    #   - "traefik.http.routers.api.service=api@internal"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # So that Traefik can listen to the Docker events
      - /volume1/docker/traefik/acme.json:/acme.json
      - /volume1/docker/traefik/FileProvider/:/FileProvider/
    restart: always


# =============================================================
#
#	WHOAMI - test webserver
#
# =============================================================

  whoami:
    image: containous/whoami
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)"
      - "traefik.http.routers.whoami.entrypoints=web-secure"
      - "traefik.http.routers.whoami.tls.certresolver=certificato"
      - "traefik.http.routers.whoami.tls.domains[0].main=*.${DOMAIN}"
      - 'traefik.http.routers.whoami.middlewares=authelia@docker'



# =============================================================
#
#	GRAFANA
#
# =============================================================

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana-storage:/var/lib/grafana
    labels:
      #	HTTPS traffic
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`pm8.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=web-secure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=certificato"
      - "traefik.http.routers.grafana.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.grafana.service=grafanaService"
      - "traefik.http.services.grafanaService.loadBalancer.server.port=3000"
      - 'traefik.http.routers.grafana.middlewares=authelia@docker'

    environment:
      - GF_SERVER_ROOT_URL=https://pm8.${DOMAIN}
      - GF_SERVER_DOMAIN=${DOMAIN}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=${GF_SMTP_USER}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS}
      - GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ASSIGN_ORG=true
      - GF_USERS_ASSIGN_ORG_ROLE=Editor
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_HEADER_NAME=Remote-User
      - GF_AUTH_PROXY_HEADER_PROPERTY=username
      - GF_AUTH_PROXY_AUTO_SIGN_UP=true

    restart: always


# =============================================================
#
#	NODERED
#
# =============================================================

  nodered:
    image: nodered/node-red
    container_name: nodered
    volumes:
      - /volume1/docker/nodered:/data
    labels:
      #	HTTPS traffic
      - "traefik.enable=true"
      - "traefik.http.routers.noderedS.rule=Host(`nodered.${DOMAIN}`)"
      - "traefik.http.routers.noderedS.entrypoints=web-secure"
      - "traefik.http.routers.noderedS.tls=true"
      - "traefik.http.routers.noderedS.tls.certresolver=certificato"
      - "traefik.http.routers.noderedS.tls.domains[0].main=*.${DOMAIN}"
      - "traefik.http.routers.noderedS.service=noderedService"
      - 'traefik.http.routers.noderedS.middlewares=authelia@docker'
      - "traefik.http.services.noderedService.loadBalancer.server.port=1880"
    restart: always


# =============================================================
#
#	AUTHELIA
#
# =============================================================

  authelia:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - /volume1/docker/authelia:/config
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`login.${DOMAIN}`)'
      - 'traefik.http.routers.authelia.entrypoints=web-secure'
      - 'traefik.http.routers.authelia.tls=true'
      - "traefik.http.routers.authelia.tls.certresolver=certificato"
      - "traefik.http.routers.authelia.tls.domains[0].main=*.${DOMAIN}"

      # The middleware that you use in every container that you want to protect
      - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.${DOMAIN}/'
      - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups'
    restart: unless-stopped
    environment:
      - TZ=${TIME_ZONE}



volumes:

  grafana-storage:
