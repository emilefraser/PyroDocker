- name: "Check for '{{ snitch.destination }}' installation directory"
  stat:
    path: "{{ snitch.destination }}"
  register: parent_path

- name: "Creating directory: '{{ snitch.destination }}'"
  when: parent_path.stat.exists == False
  file:
    path: "{{ snitch.destination }}"
    state: directory
    recurse: yes
    owner: "{{ web.user }}"
    group: "{{ web.group }}"

- name: "Check if repo is already cloned"
  git:
    repo: "{{ snitch.repo }}"
    dest: "{{ snitch.destination }}"
    clone: no
    update: no
  register: git_info

- name: "Clone repo {{ snitch.repo }}"
  when: git_info.before == None
  git:
    repo: "{{ snitch.repo }}"
    dest: "{{ snitch.destination }}"

- name: "Set {{ web.user }} as the owner for {{ snitch.destination }}"
  file:
    path: "{{ snitch.destination }}"
    state: directory
    recurse: yes
    owner: "{{ web.user }}"
    group: "{{ web.group }}"

- name: "Make sure {{ var_data_path }} exists"
  file:
    path: "{{ var_data_path }}"
    state: directory
    recurse: yes
    owner: "{{ web.user }}"
    group: "{{ web.group }}"

- name: "Generate/Retrieve Secret Key"
  set_fact:
    var_secret_key: "{{ snitch.secret_key if snitch.secret_key|length > 0 else lookup('password', '/dev/null length=64 chars=ascii_letters,digits') }}"

- name: "Checking for virtual environment"
  stat:
    path: "{{ snitch.destination }}/venv"
  register: venv

- name: "Creating env data directory"
  file:
    path: "{{ var_data_path }}/config/env"
    state: directory
    recurse: yes
    owner: "{{ web.user }}"
    group: "{{ web.group }}"

- name: "Creating env file"
  template:
    src: env.conf.j2
    dest: "{{ var_data_path }}/config/env/snitch.conf"

- name: "Creating env file link to .env"
  file:
    src: "{{ var_data_path }}/config/env/snitch.conf"
    dest: "{{ snitch.destination }}/.env"
    state: link

# The problem here is that the venv.sh file looks for the env variables within ./data/config/env/snitch.conf.
# For this reason, if the path of snitch.data_path is set, we'll need to create a symlink to it.
- name: "Creating standard env data directory"
  file:
    path: "{{ snitch.destination }}/data/config/env"
    state: directory
    recurse: yes
    owner: "{{ web.user }}"
    group: "{{ web.group }}"

- name: "Creating symlink for env file"
  when: snitch.data_path != ''
  file:
    src: "{{ var_data_path }}/config/env/snitch.conf"
    dest: "{{ snitch.destination }}/data/config/env/snitch.conf"
    state: link

- name: "Setting up virtual environment"
  when: venv.stat.exists == False
  become: yes
  become_user: "{{ web.user }}"
  shell:
    chdir: "{{ snitch.destination }}"
    cmd: |
      {{ system.python_executable }} -m venv venv
      . venv/bin/activate
      pip --no-cache-dir install -r requirements.txt
      deactivate
  args:
    chdir: "{{ snitch.destination }}"

- name: "Setting up database"
  become: yes
  become_user: "{{ web.user }}"
  shell:
    chdir: "{{ snitch.destination }}"
    cmd: |
      ./venv.sh flask db init
      ./venv.sh flask db migrate
      ./venv.sh flask db upgrade
      ./venv.sh flask snitchdb
      ./venv.sh flask settings set --name dns_daemon_bind_ip --value 0.0.0.0
      ./venv.sh flask settings set --name dns_daemon_bind_port --value "{{ snitch.listen_port }}"
      ./venv.sh flask settings set --name dns_base_domain --value "{{ web.base_domain }}"
  args:
    chdir: "{{ snitch.destination }}"

- name: "Setting up crontab"
  become: yes
  become_user: "{{ web.user }}"
  shell:
    chdir: "{{ snitch.destination }}"
    cmd: |
      ./venv.sh flask crontab add
  args:
    chdir: "{{ snitch.destination }}"
